// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "review-chatbot/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// Customer is an autogenerated mock type for the Customer type
type Customer struct {
	mock.Mock
}

type Customer_Expecter struct {
	mock *mock.Mock
}

func (_m *Customer) EXPECT() *Customer_Expecter {
	return &Customer_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *Customer) Login(ctx context.Context, email string, password string) (entity.Customer, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entity.Customer, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.Customer); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(entity.Customer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Customer_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Customer_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *Customer_Expecter) Login(ctx interface{}, email interface{}, password interface{}) *Customer_Login_Call {
	return &Customer_Login_Call{Call: _e.mock.On("Login", ctx, email, password)}
}

func (_c *Customer_Login_Call) Run(run func(ctx context.Context, email string, password string)) *Customer_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Customer_Login_Call) Return(_a0 entity.Customer, _a1 error) *Customer_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Customer_Login_Call) RunAndReturn(run func(context.Context, string, string) (entity.Customer, error)) *Customer_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewCustomer creates a new instance of Customer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Customer {
	mock := &Customer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
