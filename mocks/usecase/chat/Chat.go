// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "review-chatbot/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// Chat is an autogenerated mock type for the Chat type
type Chat struct {
	mock.Mock
}

type Chat_Expecter struct {
	mock *mock.Mock
}

func (_m *Chat) EXPECT() *Chat_Expecter {
	return &Chat_Expecter{mock: &_m.Mock}
}

// FindByCustomer provides a mock function with given fields: ctx, customerID
func (_m *Chat) FindByCustomer(ctx context.Context, customerID primitive.ObjectID) ([]entity.Chat, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for FindByCustomer")
	}

	var r0 []entity.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) ([]entity.Chat, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) []entity.Chat); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Chat_FindByCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByCustomer'
type Chat_FindByCustomer_Call struct {
	*mock.Call
}

// FindByCustomer is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID primitive.ObjectID
func (_e *Chat_Expecter) FindByCustomer(ctx interface{}, customerID interface{}) *Chat_FindByCustomer_Call {
	return &Chat_FindByCustomer_Call{Call: _e.mock.On("FindByCustomer", ctx, customerID)}
}

func (_c *Chat_FindByCustomer_Call) Run(run func(ctx context.Context, customerID primitive.ObjectID)) *Chat_FindByCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(primitive.ObjectID))
	})
	return _c
}

func (_c *Chat_FindByCustomer_Call) Return(_a0 []entity.Chat, _a1 error) *Chat_FindByCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Chat_FindByCustomer_Call) RunAndReturn(run func(context.Context, primitive.ObjectID) ([]entity.Chat, error)) *Chat_FindByCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// NewChat creates a new instance of Chat. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChat(t interface {
	mock.TestingT
	Cleanup(func())
}) *Chat {
	mock := &Chat{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
