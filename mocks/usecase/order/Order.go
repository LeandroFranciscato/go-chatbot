// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "github.com/LeandroFranciscato/go-chatbot/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// Order is an autogenerated mock type for the Order type
type Order struct {
	mock.Mock
}

type Order_Expecter struct {
	mock *mock.Mock
}

func (_m *Order) EXPECT() *Order_Expecter {
	return &Order_Expecter{mock: &_m.Mock}
}

// FindByCustomer provides a mock function with given fields: ctx, customer
func (_m *Order) FindByCustomer(ctx context.Context, customer primitive.ObjectID) ([]entity.Order, error) {
	ret := _m.Called(ctx, customer)

	if len(ret) == 0 {
		panic("no return value specified for FindByCustomer")
	}

	var r0 []entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) ([]entity.Order, error)); ok {
		return rf(ctx, customer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) []entity.Order); ok {
		r0 = rf(ctx, customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Order_FindByCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByCustomer'
type Order_FindByCustomer_Call struct {
	*mock.Call
}

// FindByCustomer is a helper method to define mock.On call
//   - ctx context.Context
//   - customer primitive.ObjectID
func (_e *Order_Expecter) FindByCustomer(ctx interface{}, customer interface{}) *Order_FindByCustomer_Call {
	return &Order_FindByCustomer_Call{Call: _e.mock.On("FindByCustomer", ctx, customer)}
}

func (_c *Order_FindByCustomer_Call) Run(run func(ctx context.Context, customer primitive.ObjectID)) *Order_FindByCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(primitive.ObjectID))
	})
	return _c
}

func (_c *Order_FindByCustomer_Call) Return(_a0 []entity.Order, _a1 error) *Order_FindByCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Order_FindByCustomer_Call) RunAndReturn(run func(context.Context, primitive.ObjectID) ([]entity.Order, error)) *Order_FindByCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: ctx, customerID, orderID
func (_m *Order) FindOne(ctx context.Context, customerID primitive.ObjectID, orderID primitive.ObjectID) (entity.Order, error) {
	ret := _m.Called(ctx, customerID, orderID)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) (entity.Order, error)); ok {
		return rf(ctx, customerID, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) entity.Order); ok {
		r0 = rf(ctx, customerID, orderID)
	} else {
		r0 = ret.Get(0).(entity.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r1 = rf(ctx, customerID, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Order_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type Order_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID primitive.ObjectID
//   - orderID primitive.ObjectID
func (_e *Order_Expecter) FindOne(ctx interface{}, customerID interface{}, orderID interface{}) *Order_FindOne_Call {
	return &Order_FindOne_Call{Call: _e.mock.On("FindOne", ctx, customerID, orderID)}
}

func (_c *Order_FindOne_Call) Run(run func(ctx context.Context, customerID primitive.ObjectID, orderID primitive.ObjectID)) *Order_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(primitive.ObjectID), args[2].(primitive.ObjectID))
	})
	return _c
}

func (_c *Order_FindOne_Call) Return(_a0 entity.Order, _a1 error) *Order_FindOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Order_FindOne_Call) RunAndReturn(run func(context.Context, primitive.ObjectID, primitive.ObjectID) (entity.Order, error)) *Order_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function with given fields: ctx, _a1
func (_m *Order) UpdateOne(ctx context.Context, _a1 entity.Order) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Order) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Order_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type Order_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 entity.Order
func (_e *Order_Expecter) UpdateOne(ctx interface{}, _a1 interface{}) *Order_UpdateOne_Call {
	return &Order_UpdateOne_Call{Call: _e.mock.On("UpdateOne", ctx, _a1)}
}

func (_c *Order_UpdateOne_Call) Run(run func(ctx context.Context, _a1 entity.Order)) *Order_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Order))
	})
	return _c
}

func (_c *Order_UpdateOne_Call) Return(_a0 error) *Order_UpdateOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Order_UpdateOne_Call) RunAndReturn(run func(context.Context, entity.Order) error) *Order_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrder creates a new instance of Order. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Order {
	mock := &Order{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
