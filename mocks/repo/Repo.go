// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "review-chatbot/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	options "go.mongodb.org/mongo-driver/mongo/options"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// Repo is an autogenerated mock type for the Repo type
type Repo[T entity.Entity] struct {
	mock.Mock
}

type Repo_Expecter[T entity.Entity] struct {
	mock *mock.Mock
}

func (_m *Repo[T]) EXPECT() *Repo_Expecter[T] {
	return &Repo_Expecter[T]{mock: &_m.Mock}
}

// DeleteMany provides a mock function with given fields: ctx, filter
func (_m *Repo[T]) DeleteMany(ctx context.Context, filter primitive.D) error {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.D) error); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo_DeleteMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMany'
type Repo_DeleteMany_Call[T entity.Entity] struct {
	*mock.Call
}

// DeleteMany is a helper method to define mock.On call
//   - ctx context.Context
//   - filter primitive.D
func (_e *Repo_Expecter[T]) DeleteMany(ctx interface{}, filter interface{}) *Repo_DeleteMany_Call[T] {
	return &Repo_DeleteMany_Call[T]{Call: _e.mock.On("DeleteMany", ctx, filter)}
}

func (_c *Repo_DeleteMany_Call[T]) Run(run func(ctx context.Context, filter primitive.D)) *Repo_DeleteMany_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(primitive.D))
	})
	return _c
}

func (_c *Repo_DeleteMany_Call[T]) Return(_a0 error) *Repo_DeleteMany_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repo_DeleteMany_Call[T]) RunAndReturn(run func(context.Context, primitive.D) error) *Repo_DeleteMany_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, filter, opts
func (_m *Repo[T]) Find(ctx context.Context, filter primitive.D, opts ...*options.FindOptions) ([]T, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 []T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.D, ...*options.FindOptions) ([]T, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.D, ...*options.FindOptions) []T); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.D, ...*options.FindOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type Repo_Find_Call[T entity.Entity] struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filter primitive.D
//   - opts ...*options.FindOptions
func (_e *Repo_Expecter[T]) Find(ctx interface{}, filter interface{}, opts ...interface{}) *Repo_Find_Call[T] {
	return &Repo_Find_Call[T]{Call: _e.mock.On("Find",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *Repo_Find_Call[T]) Run(run func(ctx context.Context, filter primitive.D, opts ...*options.FindOptions)) *Repo_Find_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.FindOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.FindOptions)
			}
		}
		run(args[0].(context.Context), args[1].(primitive.D), variadicArgs...)
	})
	return _c
}

func (_c *Repo_Find_Call[T]) Return(records []T, err error) *Repo_Find_Call[T] {
	_c.Call.Return(records, err)
	return _c
}

func (_c *Repo_Find_Call[T]) RunAndReturn(run func(context.Context, primitive.D, ...*options.FindOptions) ([]T, error)) *Repo_Find_Call[T] {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: ctx, filter
func (_m *Repo[T]) FindOne(ctx context.Context, filter primitive.D) (T, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.D) (T, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.D) T); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.D) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type Repo_FindOne_Call[T entity.Entity] struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter primitive.D
func (_e *Repo_Expecter[T]) FindOne(ctx interface{}, filter interface{}) *Repo_FindOne_Call[T] {
	return &Repo_FindOne_Call[T]{Call: _e.mock.On("FindOne", ctx, filter)}
}

func (_c *Repo_FindOne_Call[T]) Run(run func(ctx context.Context, filter primitive.D)) *Repo_FindOne_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(primitive.D))
	})
	return _c
}

func (_c *Repo_FindOne_Call[T]) Return(_a0 T, _a1 error) *Repo_FindOne_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_FindOne_Call[T]) RunAndReturn(run func(context.Context, primitive.D) (T, error)) *Repo_FindOne_Call[T] {
	_c.Call.Return(run)
	return _c
}

// InsertMany provides a mock function with given fields: ctx, entities
func (_m *Repo[T]) InsertMany(ctx context.Context, entities []T) error {
	ret := _m.Called(ctx, entities)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []T) error); ok {
		r0 = rf(ctx, entities)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo_InsertMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMany'
type Repo_InsertMany_Call[T entity.Entity] struct {
	*mock.Call
}

// InsertMany is a helper method to define mock.On call
//   - ctx context.Context
//   - entities []T
func (_e *Repo_Expecter[T]) InsertMany(ctx interface{}, entities interface{}) *Repo_InsertMany_Call[T] {
	return &Repo_InsertMany_Call[T]{Call: _e.mock.On("InsertMany", ctx, entities)}
}

func (_c *Repo_InsertMany_Call[T]) Run(run func(ctx context.Context, entities []T)) *Repo_InsertMany_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]T))
	})
	return _c
}

func (_c *Repo_InsertMany_Call[T]) Return(_a0 error) *Repo_InsertMany_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repo_InsertMany_Call[T]) RunAndReturn(run func(context.Context, []T) error) *Repo_InsertMany_Call[T] {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function with given fields: ctx, _a1
func (_m *Repo[T]) InsertOne(ctx context.Context, _a1 T) (primitive.ObjectID, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 primitive.ObjectID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, T) (primitive.ObjectID, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T) primitive.ObjectID); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(primitive.ObjectID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, T) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type Repo_InsertOne_Call[T entity.Entity] struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 T
func (_e *Repo_Expecter[T]) InsertOne(ctx interface{}, _a1 interface{}) *Repo_InsertOne_Call[T] {
	return &Repo_InsertOne_Call[T]{Call: _e.mock.On("InsertOne", ctx, _a1)}
}

func (_c *Repo_InsertOne_Call[T]) Run(run func(ctx context.Context, _a1 T)) *Repo_InsertOne_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T))
	})
	return _c
}

func (_c *Repo_InsertOne_Call[T]) Return(_a0 primitive.ObjectID, _a1 error) *Repo_InsertOne_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_InsertOne_Call[T]) RunAndReturn(run func(context.Context, T) (primitive.ObjectID, error)) *Repo_InsertOne_Call[T] {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function with given fields: ctx, _a1
func (_m *Repo[T]) UpdateOne(ctx context.Context, _a1 T) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, T) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type Repo_UpdateOne_Call[T entity.Entity] struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 T
func (_e *Repo_Expecter[T]) UpdateOne(ctx interface{}, _a1 interface{}) *Repo_UpdateOne_Call[T] {
	return &Repo_UpdateOne_Call[T]{Call: _e.mock.On("UpdateOne", ctx, _a1)}
}

func (_c *Repo_UpdateOne_Call[T]) Run(run func(ctx context.Context, _a1 T)) *Repo_UpdateOne_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T))
	})
	return _c
}

func (_c *Repo_UpdateOne_Call[T]) Return(_a0 error) *Repo_UpdateOne_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repo_UpdateOne_Call[T]) RunAndReturn(run func(context.Context, T) error) *Repo_UpdateOne_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo[T entity.Entity](t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo[T] {
	mock := &Repo[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
